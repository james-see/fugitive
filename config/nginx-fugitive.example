# example vhost file place in /etc/nginx/sites-available/ and dont for get to ln -s to sites-enabled
server {
    listen 80;
	
    # ssl stuff
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_dhparam /etc/ssl/certs/dhparam.pem;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;    
 
    root /home/[yourusername]/projects/fugitive/public/;
    index index.php index.html index.htm index.nginx-debian.html;
    access_log /home/[yourusername]/projects/logs/access.log;
    error_log /home/[yourusername]/projects/logs/error.log error;
    server_name yourcooldomain.chat www.yourcooldomain.chat;
    
    # header info
    add_header X-Frame-Options DENY;
    add_header Strict-Transport-Security max-age=15768000;

    location / {
        try_files $uri $uri/ =404;
	rewrite ^(.+)/ $1.php;
    }

    location ~ \.php$ {
try_files $uri $uri/ @rewrites;
#        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
# rewrites
location @rewrites {
    if ($uri ~* ^/([a-z]+)$) {
        set $page_to_view "/$1.php";
        rewrite ^/([a-z]+)$ /$1.php last;
    }
}

    location ~ /\.ht {
        deny all;
    }

    listen 443 ssl http2; # managed by Certbot
ssl_certificate /etc/letsencrypt/live/[yourcooldomain.chat/fullchain.pem; # managed by Certbot
ssl_certificate_key /etc/letsencrypt/live/[yourcooldomain.chat]/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot



    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    } # managed by Certbot


    # Redirect non-https traffic to https
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # } # managed by Certbot
	error_page 502 /502.html;
 location = /502.html {

      root  /home/[yourusername]/projects/errors/;

  }
}
